{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","cards","setCard","gotCards","setGotCards","desc","setDesc","price","setPrice","name","setName","selectedCard","setSelectedCard","kjijiListings","setKijijiListings","gettingListings","setGettingListings","useEffect","getCards","kjijiListingsTemp","console","log","length","i","push","a","axios","get","then","res","data","gpu_name","getKijijiDeals","card_name","url","resposne","className","map","onClick","kijijiListing","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAiGeA,MA7Ff,WACC,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAAwBR,mBAAS,IAAjC,mBAAOS,EAAP,KAAaC,EAAb,KACA,EAAwCV,mBAAS,OAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KACA,EAA2CZ,mBAAS,IAApD,mBAAOa,EAAP,KAAsBC,EAAtB,KACA,EAA8Cd,oBAAS,GAAvD,mBAAOe,EAAP,KAAwBC,EAAxB,KAEAC,qBAAU,WACJd,GACJe,OAIFD,qBAAU,WACT,IAAIE,EAAoB,GACxBC,QAAQC,IAAIhB,EAAKiB,QACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAKiB,OAAQC,IAChCJ,EAAkBK,KAAK,CAAE,KAAQf,EAAKc,GAAI,MAAShB,EAAMgB,GAAI,KAAQlB,EAAKkB,KAC1EH,QAAQC,IAAI,MAGbP,EAAkBK,GAClBH,GAAmB,KACjB,CAACX,EAAME,EAAOE,IAEjB,IAAMS,EAAQ,uCAAG,sBAAAO,EAAA,4DACN,8CADM,SAEVC,IAAMC,IADF,+CAERC,MAAK,SAAAC,GACL3B,EAAQ2B,EAAIC,KAAKC,UACjB3B,GAAY,MALE,2CAAH,qDASR4B,EAAc,uCAAG,WAAOC,GAAP,iBAAAR,EAAA,6DACtBb,EAAgBqB,GAChBjB,GAAmB,GACfkB,EAAM,uDAAyDD,EAH7C,SAICP,IAAMC,IAAIO,GAJX,cAIhBC,EAJgB,OAMtBf,QAAQC,IAAIc,EAASL,MANC,SAQhBxB,EAAQ6B,EAASL,KAAKzB,MARN,wBAShBG,EAAS2B,EAASL,KAAKvB,OATP,yBAUhBG,EAAQyB,EAASL,KAAKC,UAVN,4CAAH,sDAapB,OACC,sBAAKK,UAAU,MAAf,UACC,sBAAKA,UAAU,WAAf,UACC,uDACA,qBAAKA,UAAU,cAAf,SACEjC,EACA,qBAAKiC,UAAU,aAAf,SACEnC,EAAMoC,KAAI,SAAAJ,GAAS,OACnB,wBAAQK,QAAS,kBAAMN,EAAeC,IAAtC,SAAmDA,SAIrD,mCACC,qBAAKG,UAAU,eAAf,SACC,iDAML,qBAAKA,UAAU,gBAAf,SACErB,EACA,qBAAKqB,UAAU,kBAAf,SACC,sDAAyBzB,OAG1B,mCACC,qBAAKyB,UAAU,gBAAf,SACEvB,EAAcwB,KAAI,SAAAE,GAAa,OAC/B,sBAAKH,UAAU,gBAAf,UACC,4BAAIG,EAAc9B,OAClB,kCAAK8B,EAAchC,SACnB,4BAAIgC,EAAclC,uBC1EZmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.612ad4f8.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction App() {\n\tconst [cards, setCard] = useState([]);\n\tconst [gotCards, setGotCards] = useState(false);\n\tconst [desc, setDesc] = useState([]);\n\tconst [price, setPrice] = useState([]);\n\tconst [name, setName] = useState([]);\n\tconst [selectedCard, setSelectedCard] = useState(\"???\");\n\tconst [kjijiListings, setKijijiListings] = useState([]);\n\tconst [gettingListings, setGettingListings] = useState(true);\n\n\tuseEffect(() => {\n\t\tif (!gotCards) {\n\t\t\tgetCards();\n\t\t}\n\t})\n\n\tuseEffect(() => {\n\t\tvar kjijiListingsTemp = []\n\t\tconsole.log(desc.length);\n\t\tfor (let i = 0; i < desc.length; i++) {\n\t\t\tkjijiListingsTemp.push({ \"name\": name[i], \"price\": price[i], \"desc\": desc[i] })\n\t\t\tconsole.log(\"hi\")\n\t\t}\n\n\t\tsetKijijiListings(kjijiListingsTemp);\n\t\tsetGettingListings(false);\n\t}, [desc, price, name]);\n\n\tconst getCards = async () => {\n\t\tvar url = \"https://kijijifinder.herokuapp.com/getGPUs/\";\n\t\tawait axios.get(url)\n\t\t\t.then(res => {\n\t\t\t\tsetCard(res.data.gpu_name)\n\t\t\t\tsetGotCards(true);\n\t\t\t})\n\t}\n\n\tconst getKijijiDeals = async (card_name) => {\n\t\tsetSelectedCard(card_name);\n\t\tsetGettingListings(true);\n\t\tvar url = \"https://kijijifinder.herokuapp.com/getKijijiEntries/\" + card_name;\n\t\tconst resposne = await axios.get(url)\n\n\t\tconsole.log(resposne.data);\n\n\t\tawait setDesc(resposne.data.desc);\n\t\tawait setPrice(resposne.data.price);\n\t\tawait setName(resposne.data.gpu_name);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"PickCard\">\n\t\t\t\t<h1>Pick a Card, Any Card</h1>\n\t\t\t\t<div className=\"CardButtons\">\n\t\t\t\t\t{gotCards ? (\n\t\t\t\t\t\t<div className=\"FoundCards\">\n\t\t\t\t\t\t\t{cards.map(card_name => (\n\t\t\t\t\t\t\t\t<button onClick={() => getKijijiDeals(card_name)}>{card_name}</button>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<div className=\"LoadingCards\">\n\t\t\t\t\t\t\t\t<p>hold up</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"KjijiListings\">\n\t\t\t\t{gettingListings ? (\n\t\t\t\t\t<div className=\"FindingListings\">\n\t\t\t\t\t\t<p>Finding Listings for {selectedCard}</p>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"FoundListings\">\n\t\t\t\t\t\t\t{kjijiListings.map(kijijiListing => (\n\t\t\t\t\t\t\t\t<div className=\"kijijiListing\">\n\t\t\t\t\t\t\t\t\t<p>{kijijiListing.name}</p>\n\t\t\t\t\t\t\t\t\t<p>${kijijiListing.price}</p>\n\t\t\t\t\t\t\t\t\t<p>{kijijiListing.desc}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}